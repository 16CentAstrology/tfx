# (generated with --quick)

import execution_spec
import graph_partition
from typing import Any, Dict, List, Mapping, Type

_RemoteOpLayers: Type[graph_partition._RemoteOpLayers]
graph_pb2: module
os: module
tempfile: module
text_format: Any
tf: module

class PartitionTest(Any):
    __doc__: str
    graph_name_to_specs: Dict[str, List[execution_spec.ExecutionSpec]]
    def setUp(self) -> None: ...
    def test_remote_op_specs(self) -> None: ...
    def test_subgraph_import_validity(self) -> None: ...
    def test_subgraphs_with_golden_set(self) -> None: ...

class RemoteOpLayerTest(Any):
    __doc__: str
    def test_layers(self) -> None: ...

def _generate_unique_filename(input_names) -> str: ...
def _get_golden_subgraph(graph_name, spec) -> Any: ...
def _get_node_names(graph_def) -> set: ...
def get_graph_name_to_graph_def(graph_name_to_filepath: Mapping[str, str]) -> Dict[str, Any]: ...
def partition_all_graphs(graph_name_to_graph_def: Mapping[str, Any], graph_name_to_output_names: Mapping[str, List[str]]) -> Dict[str, List[execution_spec.ExecutionSpec]]: ...
def save_examples_as_graphdefs(export_dir) -> None: ...
