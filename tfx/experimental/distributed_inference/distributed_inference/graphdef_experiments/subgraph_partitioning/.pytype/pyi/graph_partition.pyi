# (generated with --quick)

import execution_spec
from typing import Any, Dict, List, Mapping, Set, Type, TypeVar

ExecutionSpec: Type[execution_spec.ExecutionSpec]
collections: module
graph_pb2: module
node_def_pb2: module
tf: module

_T_RemoteOpLayers = TypeVar('_T_RemoteOpLayers', bound=_RemoteOpLayers)

class _RemoteOpLayers:
    __doc__: str
    _not_processed: Set[str]
    remote_op_to_immediate_dep: Mapping[str, List[str]]
    def __init__(self, remote_op_to_immediate_dep: Mapping[str, List[str]]) -> None: ...
    def __iter__(self: _T_RemoteOpLayers) -> _T_RemoteOpLayers: ...
    def __next__(self) -> Set[str]: ...

def _add_current_spec_input_to_previous_spec_output(current_spec: execution_spec.ExecutionSpec, previous_spec: execution_spec.ExecutionSpec) -> None: ...
def _create_placeholder_node_from_existing_node(node, graph) -> Any: ...
def _get_execution_spec_for_subgraph_layer(graph_def, graph, node_name_to_node_def: Mapping[str, Any], previously_visited: Set[str], output_node_names: Set[str]) -> execution_spec.ExecutionSpec: ...
def _get_execution_specs(graph_def, graph_output_names: List[str], graph, node_name_to_node_def: Mapping[str, Any], remote_op_to_immediate_dep: Mapping[str, List[str]]) -> List[execution_spec.ExecutionSpec]: ...
def _get_execution_specs_for_remote_op_layer(remote_op_layer: Set[str], node_name_to_node_def: Mapping[str, Any]) -> List[execution_spec.ExecutionSpec]: ...
def _get_graph(graph_def) -> Any: ...
def _get_graph_def(filepath: str) -> Any: ...
def _get_input_names(subgraph) -> Set[str]: ...
def _get_node_name_to_node_def(graph_def) -> Dict[str, Any]: ...
def _get_non_input_names(subgraph) -> Set[str]: ...
def _get_previous_subgraph_layer_output_node_names(remote_op_layer: Set[str], node_name_to_node_def: Mapping[str, Any]) -> Set[str]: ...
def _get_remote_op_immediate_dep(remote_op_name: str, node_name_to_node_def: Mapping[str, Any]) -> List[str]: ...
def _get_remote_op_to_immediate_dep(node_name_to_node_def: Mapping[str, Any]) -> Dict[str, List[str]]: ...
def _is_placeholder_op(node) -> bool: ...
def _is_remote_op(node) -> bool: ...
def _modify_execution_specs_for_input_validity(specs: List[execution_spec.ExecutionSpec]) -> None: ...
def _partition_one_graph(graph_def, output_names: List[str]) -> List[execution_spec.ExecutionSpec]: ...
def get_graph_name_to_graph_def(graph_name_to_filepath: Mapping[str, str]) -> Dict[str, Any]: ...
def partition_all_graphs(graph_name_to_graph_def: Mapping[str, Any], graph_name_to_output_names: Mapping[str, List[str]]) -> Dict[str, List[execution_spec.ExecutionSpec]]: ...
