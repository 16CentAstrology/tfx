// Copyright 2023 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package tfx.orchestration;

import "ml_metadata/proto/metadata_store.proto";

message PublishIntermediateArtifactRequest {
  // The execution ID associated with the intermediate artifact.
  int64 execution_id = 1;

  // The output key defined in the component DSL for the intermediate artifact.
  string output_key = 2;

  oneof uri {
    // The temporary URI containing the artifact payload. Typically, this will
    // be a subdirectory in the execution's stateful working directory. If set,
    // the orchestrator will automatically generate a final URI and move the
    // payload to it.
    //
    // The autogenerated final intermediate artifact URIs will be
    // base_uri/intermediate_artifact_YYYYMMDD_HHMMSS_FFFFFF. base_uri will be
    // the URI of the REFERENCE artifact created by the orchestrator before the
    // component begins its execution.
    string temp_uri = 3;

    // The external URI to use as the final URI for the intermediate artifact.
    string external_uri = 6;
  }

  // Only the Artifact properties, custom_properties, and URI can be set by the
  // caller. The remaining fields will be set by the orchestrator or MLMD. We
  // enforce this contract having the properties and custom_properties in the
  // request instead of the full Artifact proto.

  // Properties of the artifact to set.
  map<string, ml_metadata.Value> properties = 7;

  // Custom properties of the artifact to set.
  map<string, ml_metadata.Value> custom_properties = 8;
}

message PublishIntermediateArtifactResponse {
  // The published intermediate artifact marked with state LIVE.
  ml_metadata.Artifact artifact = 1;
}

service IntermediateArtifactEmitter {
  // Publishes an intermediate artifact. Creates an artifact in MLMD with state
  // LIVE, which will be immediately accessible by components even if
  // the producer component execution is not finished.
  rpc PublishIntermediateArtifact(PublishIntermediateArtifactRequest)
      returns (PublishIntermediateArtifactResponse) {}
}
