// Copyright 2023 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package tfx.orchestration;

import "ml_metadata/proto/metadata_store.proto";

message GetNextURIRequest {
  // The execution ID associated with the intermediate artifact.
  int64 execution_id = 1;

  // The output key defined in the component DSL for the intermediate artifact.
  string output_key = 2;

  // The optional subdirectory for the intermediate artifact's URI. The final
  // URI for the intermediate artifact will look like base_uri/subdirectory.
  // base_uri will be the URI of the REFERENCE artifact created by the
  // orchestrator before the component begins its execution.
  //
  // If the caller provides the subdirectory for one intermediate artifact, then
  // they must provide a unique subdirectory for all future intermediate
  // artifacts, else an error will be thrown.
  //
  // If subdirectory is not provided, a unique subdirectory will be
  // generated, incrementing by 1. The resulting intermediate artifact URIs will
  // be base_uri/auto000000001, base_uri/000000002, etc.
  optional string subdirectory = 3;
}

message GetNextURIResponse {
  // The unique URI for the next intermediate artifact.
  string uri = 1;
}

service IntermediateArtifactEmitter {
  // Generates a unique URI and creates the URI directory for the next
  // intermediate artifact. A component can write to this URI in the middle of
  // its execution.
  rpc GetNextURI(GetNextURIRequest) returns (GetNextURIResponse) {}

  // TODO(b/286559753): Add a PublishIntermediateArtifact RPC for creating a
  // LIVE intermediate artifact so that it is immediately accessible by a
  // consumer component even if the producer component execution is not
  // finished.
}
